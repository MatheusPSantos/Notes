Workflow
Creating a ConfigMap Inline
We can create a ConfigMap quickly using kubectl inline. This has some advantages where you don't need to create a file to store all the values. To do this we can run the following command:

kubectl create configmap configmap-warning --from-literal=message=goodbye.world


The output should look like this:

configmap/configmap-warning created


Creating a ConfigMap From a File
Of course in you favorite text editor create a new file and call it configmap.yaml. In this file we can add the base fields needed:

apiVersion: 
kind: 
metadata:


We are not going to use the spec field here but instead use the data field, so, your file should look like this:

apiVersion: 
kind: 
metadata:
data:


Now we need to set some of the values. For apiVersion set the value to v1. The kind needs to be set to ConfigMap. In metadata we are just going to add a key value pair for name and message.

The data section we have one key value pair for this example, message and "hello.world".

NOTE: the value for message is "hello.world" and there are " (quotes) around the value.

The final file should look like this:

apiVersion: v1
kind: ConfigMap
metadata:
  name: configmap-message
data:
  message: "hello.world"


This is a very simple example of a ConfigMap.

Now we need to create this ConfigMap:

kubectl create -f configmap.yaml


The output should look like this:

configmap/configmap-message created


Viewing a ConfigMap
Like all objects in Kubernetes we are going to use the describe command to display the values within a ConfigMap:

kubectl describe configmaps configmap-warning


With the output looking like this:

Name:         configmap-warning
Namespace:    namespace-1
Labels:       <none>
Annotations:  <none>

Data
====
message:
----
goodbye.world

BinaryData
====

Events:  <none>
We can do the same for the configmap.yaml, but the structure will look the same with the slight difference to the message value.



Using Values From ConfigMap
In a text editor of your choice create a file called configmap-test-pod.yaml and we will use this to create a Pod to test our ConfigMaps.

The base fields should look like this:

apiVersion: v1
kind: Pod
metadata:
  name: configmap-test-pod
  namespace: namespace-1
  labels:
    name: configmap-test-pod
The spec section is a little more involved. We need to add this:

containers:
  - name: configmap-test-pod
    image: registry.k8s.io/busybox
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
  restartPolicy: Never


We have covered most of these fields in previous lessons. Few major changes are the addition of restartPolicy and we set that to Never. We also put some resources limits in this containers spec.

Now we need to set the command and the env. first add in the command and set it to ["/bin/sh", "-c", "env"]. The spec section should now look like so:

containers:
  - name: configmap-test-pod
    image: registry.k8s.io/busybox
    command: ["/bin/sh", "-c", "env"]
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
  restartPolicy: Never


Now we are going to map the values from our ConfigMaps to this Pod. We need to add a subsection called env below is the scaffold of each subsection of env:

- name: # name of the value
  valueFrom:
    configMapKeyRef:
      name: # name of the configmap
      key: # key from the configmap


Filling this out for each of our ConfigMaps should look like this:

- name: CONFIGMAP_MESSAGE # name of the value
  valueFrom:
    configMapKeyRef:
      name: configmap-message # name of the configmap
      key: message
- name: CONFIGMAP_WARNING # name of the value
  valueFrom:
    configMapKeyRef:
      name: configmap-warning # name of the configmap
      key: message # key from the configmap


The final file should look like this:

apiVersion: v1
kind: Pod
metadata:
  name: configmap-test-pod
  namespace: namespace-1
  labels:
    name: configmap-test-pod
spec:
  containers:
  - name: configmap-test-pod
    image: registry.k8s.io/busybox
    command: ["/bin/sh", "-c", "env"]
    env:
      - name: CONFIGMAP_MESSAGE
        valueFrom:
          configMapKeyRef:
            name: configmap-message
            key: message
      - name: CONFIGMAP_WARNING
        valueFrom:
          configMapKeyRef:
            name: configmap-warning
            key: message
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
  restartPolicy: Never


Now to create this Pod:

kubectl create -f configmap-test-pod.yaml 


The output should look like this:

pod/configmap-test-pod created


Now we can get those environmental variable:

kubectl logs configmap-test-pod


With the output looking like this:

KUBERNETES_PORT=tcp://10.43.0.1:443
KUBERNETES_SERVICE_PORT=443
CONFIGMAP_MESSAGE=hello.world
HOSTNAME=configmap-test-pod
SHLVL=1
HOME=/root
KUBERNETES_PORT_443_TCP_ADDR=10.43.0.1
CONFIGMAP_WARNING=goodbye.world
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP=tcp://10.43.0.1:443
KUBERNETES_SERVICE_PORT_HTTPS=443
PWD=/
KUBERNETES_SERVICE_HOST=10.43.0.1


And we can see CONFIGMAP_MESSAGE=hello.world and CONFIGMAP_WARNING=goodbye.world.



Creating a Secret Inline
The Kubernetes tool kubectl allows us to create Secrets inline and without needing a file. To do this we can run the following command:

kubectl create secret generic inline-secret --from-literal=username=user --from-literal=password=password


With the output looking something like this:

secret/inline-secret created


We can check and see what this looks like by doing a describe on the secrets:

kubectl describe secrets inline-secret


With the output looking something like this:

Name:         inline-secret
Namespace:    namespace-1
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
username:  4 bytes
password:  8 bytes


Creating a Secret From a File
Now with a text editor of your create a file called secret.yaml. The top level fields of this object is going to be slightly different that what we saw before looking like this:

apiVersion:
kind:
metadata:
type:


Now we can start setting some values to these fields:

apiVersion: v1
kind: Secret
metadata:
  name: podsecret
type: Opaque


Most fields are the same the new one is type and we are going to set that to Opaque. Now we are going to add some data to this yaml:

stringData:
  username: user
  password: password


The final file should look something like this:

apiVersion: v1
kind: Secret
metadata:
  name: podsecret
type: Opaque
stringData:
  username: user
  password: password


We can now create this secret:

kubectl create -f secret.yaml


With the output looking something like this:

secret/podsecret created


Now we can take a look at this Secret using the describe command:

kubectl describe secrets podsecret


With the output looking something like this:

Name:         podsecret
Namespace:    namespace-1
Labels:       <none>
Annotations:  <none>

Type:  Opaque

Data
====
password:  8 bytes
username:  4 bytes


Using Values From Secrets
The easiest way for us to test pulling secrets is to create a pod. We are going to create a file copy of the configmap-test-pod.yaml and call it secret-test-pod.yaml. And in your favorite text editor open secret-test-pod.yaml.

The file looks exactly like configmap-test-pod.yaml below are the updates to the secret-test-pod.yaml:

apiVersion: v1
kind: Pod
metadata:
  name: secret-test-pod # changed from configmap-test-pod
  namespace: namespace-1
  labels:
    name: secret-test-pod # changed from configmap-test-pod
spec:
  containers:
  - name: secret-test-pod # changed from configmap-test-pod
    image: registry.k8s.io/busybox
    command: ["/bin/sh", "-c", "env"]
    env:
      - name: USERNAME # changed from CONFIGMAP_MESSAGE
        valueFrom:
          secretKeyRef: # changed from configMapKeyRef
            name: podsecret # changed from configmap-message
            key: username # changed from message
      - name: PASSWORD # changed from CONFIGMAP_WARNING
        valueFrom:
          secretKeyRef: # changed from configMapKeyRef
            name: podsecret # changed from configmap-warning
            key: password # changed from message
    resources:
      limits:
        memory: "128Mi"
        cpu: "500m"
  restartPolicy: Never


We can now create this pod:

kubectl create -f secret-test-pod.yaml


With the output looking something like this:

pod/secret-test-pod created


Now to see these values we can check the logs:

kubectl logs secret-test-pod 


And the output will look something like this:

KUBERNETES_PORT=tcp://10.43.0.1:443
KUBERNETES_SERVICE_PORT=443
HOSTNAME=secret-test-pod
SHLVL=1
HOME=/root
USERNAME=user
KUBERNETES_PORT_443_TCP_ADDR=10.43.0.1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP=tcp://10.43.0.1:443
KUBERNETES_SERVICE_PORT_HTTPS=443
PWD=/
KUBERNETES_SERVICE_HOST=10.43.0.1
PASSWORD=password


And we can see the USERNAME=user and the PASSWORD=password.



